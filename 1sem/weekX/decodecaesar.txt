Поздравляем с расшифровкой раздела!

Итак, вы догадались почему шифр Цезаря не является криптостойким: слишком мала мощность множества ключей и нужный ключ легко найти методом полного перебора.

Можно ли увеличить криптостойкость, не меняя метод шифрования? Да, можно. Если заменять один символ алфавита на определённый другой символ того же алфавита по какой-то таблице замен, то сама таблица замен и является ключом.

|а|б|в|г|д|е|ё|ж|з|и|й|к|л|м|н|о|п|р|с|т|у|ф|х|ц|ч|ш|щ|ъ|ы|ь|э|ю|я|

|ь|з|ц|в|к|б|щ|х|ф|п|р|я|л|э|а|е|ы|ш|у|м|ъ|ж|ё|о|г|й|н|д|и|т|ч|ю|с|

Множество ключей — это множество возможных таблиц простых замен. Для русского алфавита мощность множества таблиц простых замен равна факториалу от 33. 33! = 8683317618811886495518194401280000000

Если тратить на проверку одного варианта 0.000001 секунды, получится 2.8e+23 лет. Может показаться, что шифр простой замены вполне криптостойкий, однако это не так.

Его достаточно просто взломать при помощи частотного анализа. Дело в том, что частота появления заданной буквы алфавита в достаточно длинных текстах одна и та же для разных текстов одного языка. Если в шифротексте будет символ с вероятностью появления, аналогичной стандартной для языка, то можно предположить, что он и является указанной зашифрованной буквой.

Метод частотного криптоанализа известен с IX-го века, хотя наиболее известным случаем его применения в реальной жизни, возможно, является дешифровка египетских иероглифов в 1822 году.

Итак, следующая часть работы зашифрована при помощи следующей программы:

import random

	class Monoalphabet:
	    alphabet = ""  # TODO

	    def __init__(self, keytable):
	        lowercase_code = {x: y for x, y in zip(self.alphabet, keytable)}
	        uppercase_code = {x.upper(): y.upper() for x, y in zip(self.alphabet, keytable)}
	        self._encode = lowercase_code
	        self._encode.update(uppercase_code)
	        self._decode = {}  # TODO

	    def encode(self, text):
	        return ''.join([self._encode.get(char, char) for char in text])

	    def decode(self, line):
	        pass  # TODO


	key = Monoalphabet.alphabet[:]
	random.shuffle(key)
	cipher = Monoalphabet(key)
	line = input()
	while line:
	    print(cipher.encode(line))
	    line = input()
Программу для частотного анализа следует написать самостоятельно. Успехов!